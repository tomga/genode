#
# \brief  Test for the SSH terminal
#

assert_spec x86

if {[have_spec linux]} {
	puts "Run script is not supported on this platform."
	exit 0
}

# Build
#

set build_components {
	core init timer
	drivers/nic
	drivers/rtc
	drivers/uart
	app/gdb_monitor
	server/ssh_terminal
	server/fs_rom
	server/vfs
	lib/vfs/jitterentropy
	lib/vfs/lxip
	lib/vfs/pipe
	test/libports/ncurses
	test/terminal_echo
	noux-pkg/bash
	server/nic_router
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="500"/>
	<resource name="CAP" preserve="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="pc_uart_drv">
		<resource name="RAM" quantum="2M"/>
		<provides>
			<service name="Terminal"/>
			<service name="Uart"/>
		</provides>
		<config>
			<policy label_prefix="ssh_terminal" uart="1"/>
		</config>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes"/>
	</start>

	<start name="nic_drv">
		<binary name="ipxe_nic_drv"/>
		<resource name="RAM" quantum="8M"/>
		<config mode="uplink_client"/>
		<route>
			<service name="Uplink"> <child name="nic_router"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="nic_router" caps="200">
		<resource name="RAM" quantum="10M"/>
		<provides>
			<service name="Nic"/>
			<service name="Uplink"/>
		</provides>
		<config verbose_domain_state="yes">

			<policy label_prefix="ssh_terminal"  domain="downlink"/>
			<policy label_prefix="nic_drv"      domain="uplink"/>

			<domain name="uplink">

				<nat domain="downlink"
				     tcp-ports="16384"
				     udp-ports="16384"
				     icmp-ids="16384"/>

				<tcp-forward port="22" domain="downlink" to="10.0.3.2" to_port="22"/>

			</domain>

			<domain name="downlink" interface="10.0.3.1/24">

				<dhcp-server ip_first="10.0.3.2" ip_last="10.0.3.2"/>

				<tcp dst="0.0.0.0/0"><permit-any domain="uplink" /></tcp>
				<udp dst="0.0.0.0/0"><permit-any domain="uplink" /></udp>
				<icmp dst="0.0.0.0/0" domain="uplink"/>

			</domain>

		</config>
	</start>

	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
	</start>

	<start name="ssh_terminal" caps="2000">
		<binary name="gdb_monitor"/>
		<resource name="RAM" quantum="256M"/>

		<provides> <service name="Terminal"/> </provides>

		<config>
			<target name="ssh_terminal">

				<config ld_verbose="yes" port="22" allow_password="yes"
				        show_password="yes" ed25519_key="/etc/ssh/ed25519_key">
					<policy label_prefix="/bin/bash" user="genode" password="xuon" multi_login="yes" request_terminal="yes"/>
					<policy label_prefix="test-terminal_echo" user="charlie" password="echo"/>

					<vfs>
						<dir name="dev">
							<log/>
							<jitterentropy name="random"/>
							<jitterentropy name="urandom"/>
							<rtc/>
						</dir>
						<dir name="etc">
							<dir name="ssh">
								<rom name="ed25519_key"/>
							</dir>
						</dir>
						<dir name="socket"> <lxip dhcp="yes"/> </dir>
						<dir name="pipe"> <pipe/> </dir>
					</vfs>
					<libc stdout="/dev/log" stderr="/dev/log" socket="/socket" pipe="/pipe" rtc="/dev/rtc">
					</libc>
				</config>
			</target>
			<preserve name="RAM" quantum="64M"/>
			<vfs>
				<dir name="dev"> <log/> <terminal/> </dir>
				<dir name="pipe"> <pipe/> </dir>
			</vfs>
			<libc stdout="/dev/log" stderr="/dev/log" pipe="/pipe"/>
		</config>
		<route>
			<service name="Nic"> <child name="nic_router"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="Terminal"> <child name="pc_uart_drv"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="test-terminal_echo">
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="Terminal"> <child name="ssh_terminal"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="vfs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<vfs> <tar name="bash.tar"/> </vfs>
			<default-policy root="/" writeable="yes"/>
		</config>
	</start>

	<start name="vfs_rom">
		<resource name="RAM" quantum="10M"/>
		<binary name="fs_rom"/>
		<provides> <service name="ROM"/> </provides>
		<config/>
		<route>
			<service name="File_system"> <child name="vfs"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="/bin/bash" caps="500">
		<resource name="RAM" quantum="64M"/>
		<config verbose="yes">
			<libc stdin="/dev/terminal" stdout="/dev/terminal" stderr="/dev/terminal"
			      rtc="/dev/null"/>
			<vfs>
				<dir name="dev"> <terminal/> <log/> <null/> </dir>
				<inline name=".bash_profile">
					echo Welcome to Genode! > /dev/log
				</inline>
			</vfs>
			<env key="TERM" value="screen"/>
			<env key="HOME" value="/"/>
			<env key="IGNOREEOF" value="3"/>
			<arg value="/bin/bash"/>
			<arg value="--login"/>
		</config>
		<route>
			<service name="ROM" label_suffix=".lib.so"> <parent/> </service>
			<service name="ROM" label_last="/bin/bash"> <child name="vfs_rom"/> </service>
			<service name="Terminal"> <child name="ssh_terminal"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
}

append_platform_drv_config

append config {
</config>}

install_config $config

#
# Generate a new host key
#
if {![file exists bin/ed25519_key]} {
	exec ssh-keygen -t ed25519 -f bin/ed25519_key -q -N ""
}

#
# Boot modules
#

# evaluated by the run tool
proc binary_name_gdbserver_platform_lib_so { } {
	return "gdbserver_platform-$::env(KERNEL).lib.so"
}

# generic modules
set boot_modules {
	core ld.lib.so init timer ipxe_nic_drv rtc_drv report_rom vfs fs_rom
	test-terminal_echo nic_router

	pc_uart_drv gdb_monitor gdbserver_platform.lib.so stdcxx.lib.so

	libc.lib.so libm.lib.so vfs.lib.so
	vfs_lxip.lib.so lxip.lib.so
	posix.lib.so libcrypto.lib.so libssh.lib.so zlib.lib.so ncurses.lib.so
	vfs_jitterentropy.lib.so vfs_pipe.lib.so ssh_terminal

	bash.tar ed25519_key
}
#	libsanitizer_common.lib.so libubsan.lib.so

# platform-specific modules
append_platform_drv_boot_modules

build_boot_image $boot_modules

#
# Execute test
#

set local_port 5556

append qemu_args     " -m 512 "
append_qemu_nic_args "hostfwd=tcp::5555-:22"

# qemu config
append qemu_args " -display none "

# connect comport 0 to stdio
append qemu_args " -serial stdio "

# connect comport 1 with TCP port $local_port
append qemu_args " -serial chardev:uart "
append qemu_args " -chardev socket,id=uart,port=$local_port,host=localhost,server,nowait,ipv4 "


set lxip_match_string "ipaddr=(\[0-9\]+\.\[0-9\]+\.\[0-9\]+\.\[0-9\]+).*\n"

run_genode_until {.*Remote debugging using /dev/terminal.*} 30

puts "GDB monitor is up, starting GDB in a new terminal"

source ${genode_dir}/repos/ports/run/gdb_monitor.inc

# GDB loads symbols from 'debug/ld.lib.so'
if { [have_spec nova] } {
	exec ln -sf ld-nova.lib.so debug/ld.lib.so
}
if { [have_spec foc] } {
	exec ln -sf ld-foc.lib.so debug/ld.lib.so
}

set gdb_target_binary "ssh_terminal"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote localhost:$local_port\" "

append gdb_cmds [gdb_initial_breakpoint_cmds $gdb_target_binary]

# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

#append gdb_cmds {-ex "'channel_pty_request_cb(ssh_session_struct*, ssh_channel_struct*, char const*, int, int, int, int, void*)'" }

# continue
append gdb_cmds {-ex "cont" }


puts "command: [gdb] debug/ld.lib.so $gdb_cmds"

exec [terminal] -e "bash -lc \'[gdb] debug/ld.lib.so $gdb_cmds\'" &

interact -i [output_spawn_id]

###if {[get_cmd_switch --autopilot]} {
###	run_genode_until $lxip_match_string 60
###	set serial_id [output_spawn_id]
###
###	if {[have_include "power_on/qemu"]} {
###		set host "localhost"
###		set port "5555"
###	} else {
###		regexp $lxip_match_string $output all host
###		puts ""
###		set port "22"
###	}
###	# wait for ssh_terminal to come up
###	sleep 5
###	spawn sshpass -p xuon ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l genode $host -p $port
###	set ssh_id $spawn_id
###	set spawn_id_list [list $ssh_id $serial_id]
###	run_genode_until {.*\[init -> /bin/bash.*\] Welcome to Genode!.*\n} 15 $spawn_id_list
###	puts ""
###	puts ""
###} else {
###	run_genode_until forever
###}

exec rm bin/ed25519_key bin/ed25519_key.pub

# vi: set ft=tcl :
