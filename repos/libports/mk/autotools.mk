#
# \brief  Rules for building software that uses the GNU build tools
# \author Norman Feske
# \date   2011-02-02
#
# This file is meant to be included by 'target.mk' files. Instead of building
# a normal Genode target, the 'target.mk' file will then trigger the build
# of the contrib package specified with the 'AUTOTOOLS_PKG' variable. The build
# consists to the following steps
#
# 1. Configuring the package by invoking the package's 'configure' script
#    with the arguments required for cross compiling the package for
#    Genode.
# 2. Building the package by invoking the 'Makefile' generated by the
#    'configure' script.
#
# Limitations
# -----------
#
# In contrast to the Genode build system, library dependencies are not covered.
# So if a library used by a autotools package is changed, the autotools package gets not
# relinked automatically. In this case, 'make clean' must be invoked manually
# within the build subdirectory of the autotools package.
#

#
# Use name of the directory hosting the 'target.mk' file as 'TARGET'
# and 'AUTOTOOLS_PKG' by default.
#
TARGET ?= $(lastword $(subst /, ,$(PRG_DIR)))
TARGET_LIB= $(TARGET).lib.so

AUTOTOOLS_PKG ?= $(TARGET)

LIBS  += libc libm

AUTOTOOLS_PKG_DIR ?= $(call select_from_ports,$(AUTOTOOLS_PKG))/src/lib/$(AUTOTOOLS_PKG)

PWD = $(shell pwd)

#
# Detect missing preparation of autotools package
#
#ifeq ($(AUTOTOOLS_PKG_DIR),)
#REQUIRES += prepare_$(AUTOTOOLS_PKG)
#endif

#
# Verbose build
#
ifeq ($(VERBOSE),)
AUTOTOOLS_MAKE_VERBOSE = V=1
AUTOTOOLS_CONFIGURE_VERBOSE =

#
# Non-verbose build
#
else
AUTOTOOLS_MAKE_VERBOSE = -s
AUTOTOOLS_CONFIGURE_VERBOSE = --quiet

# filter for configure output of autotools package
AUTOTOOLS_CONFIGURE_OUTPUT_FILTER = > stdout.log 2> stderr.log ||\
	  (echo "Error: configure script of $(AUTOTOOLS_PKG) failed" && \
	   cat stderr.log && false)

# filter for make output of autotools package
AUTOTOOLS_BUILD_OUTPUT_FILTER = 2>&1 | sed "s/^/      [$(AUTOTOOLS_PKG)]  /"

endif

ifeq ($(findstring arm, $(SPECS)), arm)
AUTOTOOLS_CONFIGURE_ARGS += --host arm-none-eabi
else
ifeq ($(findstring x86, $(SPECS)), x86)
AUTOTOOLS_CONFIGURE_ARGS += --host x86_64-pc-elf
endif
endif

AUTOTOOLS_CONFIGURE_ARGS += --srcdir=$(AUTOTOOLS_PKG_DIR)
AUTOTOOLS_CONFIGURE_ARGS += --prefix /

#CONFIG_GUESS_SCRIPT = $(AUTOTOOLS_PKG_DIR)/config.guess
#ifneq ($(wildcard $(CONFIG_GUESS_SCRIPT)),)
#AUTOTOOLS_CONFIGURE_ARGS += --build $(shell $(CONFIG_GUESS_SCRIPT))
#else
AUTOTOOLS_CONFIGURE_ARGS += --build x86-linux
#endif

AUTOTOOLS_CONFIGURE_ARGS += $(AUTOTOOLS_CONFIGURE_VERBOSE)

AUTOTOOLS_LDFLAGS += -nostdlib $(CXX_LINK_OPT) $(CC_MARCH) -Wl,-T$(LD_SCRIPT_DYN) \
                -Wl,--dynamic-linker=$(DYNAMIC_LINKER).lib.so \
                -Wl,--eh-frame-hdr
AUTOTOOLS_LIBTOOLFLAGS = --preserve-dup-deps

LIBGCC = $(shell $(CC) $(CC_MARCH) -print-libgcc-file-name)

AUTOTOOLS_CPPFLAGS += -nostdinc $(INCLUDES)
AUTOTOOLS_CPPFLAGS += -D_GNU_SOURCE=1

# flags to be used in both CFLAGS and CXXFLAGS
AUTOTOOLS_COMMON_CFLAGS_CXXFLAGS += -ffunction-sections $(CC_OLEVEL) $(CC_MARCH)
AUTOTOOLS_COMMON_CFLAGS_CXXFLAGS += -g

AUTOTOOLS_CFLAGS += $(AUTOTOOLS_COMMON_CFLAGS_CXXFLAGS)
AUTOTOOLS_CXXFLAGS += $(AUTOTOOLS_COMMON_CFLAGS_CXXFLAGS)

#
# The 'sort' is needed to ensure the same link order regardless
# of the find order, which uses to vary among different systems.
#
SHARED_LIB_FILES := $(foreach l,$(LIBS:.lib=),$(LIB_CACHE_DIR)/$l/$l.lib.so)
SHARED_LIB_FILES := $(sort $(wildcard $(SHARED_LIB_FILES)))
SHARED_LIB_FILES += $(LIB_CACHE_DIR)/$(DYNAMIC_LINKER)/$(DYNAMIC_LINKER).lib.so

STATIC_LIB_FILES := $(foreach l,$(DEPS:.lib=),$(LIB_CACHE_DIR)/$l/$l.lib.a)
STATIC_LIB_FILES := $(sort $(wildcard $(STATIC_LIB_FILES)))

LINK_ITEMS       := $(OBJECTS) $(STATIC_LIB_FILES) $(SHARED_LIB_FILES)

#
# We have to specify 'LINK_ITEMS' twice to resolve inter-library dependencies.
# Unfortunately, the use of '--start-group' and '--end-group' does not suffice
# in all cases because 'libtool' strips those arguments from the 'LIBS' variable.
#

AUTOTOOLS_LIBS_A  = $(filter %.a, $(sort $(LINK_ITEMS)) $(EXT_OBJECTS) $(LIBGCC))
AUTOTOOLS_LIBS_SO = $(filter %.so,$(sort $(LINK_ITEMS)) $(EXT_OBJECTS) $(LIBGCC))
AUTOTOOLS_LIBS += $(AUTOTOOLS_LIBS_A) $(AUTOTOOLS_LIBS_SO) $(AUTOTOOLS_LIBS_A)

#
# Re-configure the Makefile if the Genode build environment changes
#
Makefile reconfigure: $(MAKEFILE_LIST)

#
# Invoke configure script with the Genode environment
#
Makefile reconfigure: autotools_env.sh
	@$(MSG_CONFIG)$(TARGET)
	$(VERBOSE)source autotools_env.sh && $(AUTOTOOLS_PKG_DIR)/configure $(AUTOTOOLS_ENV) $(AUTOTOOLS_CONFIGURE_ARGS) $(AUTOTOOLS_CONFIGURE_OUTPUT_FILTER)

autotools_env.sh:
	$(VERBOSE)rm -f $@
	$(VERBOSE)echo "export CC='$(CC)'" >> $@
	$(VERBOSE)echo "export CXX='$(CXX)'" >> $@
	$(VERBOSE)echo "export LD='$(LD)'" >> $@
	$(VERBOSE)echo "export AR='$(AR)'" >> $@
	$(VERBOSE)echo "export NM='$(NM)'" >> $@
	$(VERBOSE)echo "export RANLIB='$(RANLIB)'" >> $@
	$(VERBOSE)echo "export STRIP='$(STRIP)'" >> $@
	$(VERBOSE)echo "export CPPFLAGS='$(AUTOTOOLS_CPPFLAGS)'" >> $@
	$(VERBOSE)echo "export CFLAGS='$(AUTOTOOLS_CFLAGS)'" >> $@
	$(VERBOSE)echo "export CXXFLAGS='$(AUTOTOOLS_CXXFLAGS)'" >> $@
	$(VERBOSE)echo "export LDFLAGS='$(AUTOTOOLS_LDFLAGS)'" >> $@
	$(VERBOSE)echo "export LIBS='$(AUTOTOOLS_LIBS)'" >> $@
	$(VERBOSE)echo "export LIBTOOLFLAGS='$(AUTOTOOLS_LIBTOOLFLAGS)'" >> $@
	$(VERBOSE)echo "export PS1='<autotools>'" >> $@

#
# Invoke the 'Makefile' generated by the configure script
#
# The 'MAN=' argument prevent manual pages from being created. This would
# produce an error when the package uses the 'help2man' tool. This tool
# tries to extract the man page of a program by executing it with the
# '--help' argument on the host. However, we cannot run Genode binaries
# this way.
#
autotools_built.tag: autotools_env.sh Makefile
	@$(MSG_BUILD)$(TARGET)
	$(VERBOSE)source autotools_env.sh && $(MAKE) $(AUTOTOOLS_MAKE_ENV) $(AUTOTOOLS_MAKE_VERBOSE) MAN= $(AUTOTOOLS_BUILD_OUTPUT_FILTER)
	@touch $@

AUTOTOOLS_INSTALL_TARGET ?= install-strip

autotools_installed.tag: autotools_built.tag
	@$(MSG_INST)$(TARGET)
	$(VERBOSE)source autotools_env.sh && $(MAKE) $(AUTOTOOLS_MAKE_ENV) $(AUTOTOOLS_MAKE_VERBOSE) $(AUTOTOOLS_INSTALL_TARGET) DESTDIR=$(PWD)/install MAN= >> stdout.log 2>> stderr.log
	$(VERBOSE)rm -f $(INSTALL_DIR)/$(TARGET)
	$(VERBOSE)ln -sf $(PWD)/install $(INSTALL_DIR)/$(TARGET)
	@touch $@

$(TARGET_LIB): autotools_installed.tag
	@touch $@

#
# The clean rule is expected to be executed within the 3rd-party build
# directory. The check should prevent serious damage if this condition
# is violated (e.g., while working on the build system).
#
ifeq ($(notdir $(PWD)),$(notdir $(PRG_DIR)))
clean_autotools_build_dir:
	$(VERBOSE)rm -rf $(PWD)

clean_prg_objects: clean_autotools_build_dir
endif


